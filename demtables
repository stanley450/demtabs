
fig4
<tr>
									<td></td>
									<td>*</td>
									<td>X</td>
									<td>.Word</td>
									<td>15</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>reserve a word of memory for variable 'x'.  Initialize to 15.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Load</td>
									<td>RegA</td>
									<td>X</td>
									<td></td>
									<td>;</td>
									<td>load the value of variable 'x' into register A.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegB</td>
									<td>1</td>
									<td></td>
									<td>;</td>
									<td>load the constant value 1 into register B.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Sub</td>
									<td>Reg0</td>
									<td>RegA</td>
									<td>RegB</td>
									<td>;</td>
									<td>subtract the contents of register B from A placing result in 0.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>Reg0</td>
									<td>X</td>
									<td></td>
									<td>;</td>
									<td>store the value held in register 0 into the variable 'x'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Halt</td>
									<td></td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>halt execution of this assembly language program.</td>
								</tr>
								
								
								fig5
								<tr>
									<td></td>
									<td>*</td>
									<td>AGE</td>
									<td>.Word</td>
									<td>2</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare and initialize 'age' to 2.  Our subject is 2 years old.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>MINOR</td>
									<td>.Block</td>
									<td>1</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare 'minor'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>Reg0</td>
									<td>0</td>
									<td></td>
									<td>;</td>
									<td>load the constant value 0 into register 0.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>Reg0</td>
									<td>MINOR</td>
									<td></td>
									<td>;</td>
									<td>store a zero into 'minor' – i.e., minor is assumed 'false'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>IF</td>
									<td>Load</td>
									<td>RegA</td>
									<td>AGE</td>
									<td></td>
									<td>;</td>
									<td>load the value of variable 'age' into register A.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegB</td>
									<td>18</td>
									<td></td>
									<td>;</td>
									<td>load the constant value 18 into register B.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Compare</td>
									<td>RegA</td>
									<td>RegB</td>
									<td></td>
									<td>;</td>
									<td>compare registers A & B &#45; i.e., the value of 'age' to 18.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Branch</td>
									<td>LT</td>
									<td>THEN</td>
									<td></td>
									<td>;</td>
									<td>IF 'age' is less than 18 branch to 'then'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Jump</td>
									<td>ENDIF</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>otherwise jump to the end of the if block &#45; 'endif'</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>THEN</td>
									<td>LoadImm</td>
									<td>Reg1</td>
									<td>1</td>
									<td></td>
									<td>;</td>
									<td>THEN: load the constant value 1 into register 1.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>Reg1</td>
									<td>MINOR</td>
									<td></td>
									<td>;</td>
									<td>store a one into 'minor' &#45; i.e., minor is 'true'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>ENDIF</td>
									<td>Halt</td>
									<td></td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>halt execution of this assembly language program.</td>
								</tr>
								
								fig6
								<tr>
									<td></td>
									<td>*</td>
									<td>MINORS</td>
									<td>.Word</td>
									<td>0</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare and initialize the number of 'minors' to 0.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>ADULTS</td>
									<td>.Word</td>
									<td>0</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare and initialize the number of 'adults' to 0.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>AGE</td>
									<td>.Word</td>
									<td>21</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare and initialize the 'age' of the person to 21.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>IF</td>
									<td>Load</td>
									<td>RegA</td>
									<td>AGE</td>
									<td></td>
									<td>;</td>
									<td>load the value of variable 'age' into register A.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegB</td>
									<td>18</td>
									<td></td>
									<td>;</td>
									<td>load the constant value 18 into register B.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Compare</td>
									<td>RegA</td>
									<td>RegB</td>
									<td></td>
									<td>;</td>
									<td>compare registers A & B &#45; i.e., the value of 'age' to 18</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Branch</td>
									<td>LT</td>
									<td>THEN</td>
									<td></td>
									<td>;</td>
									<td>IF 'age' is less than 18 branch to 'then'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Jump</td>
									<td>ELSE</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>otherwise jump to 'else'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>THEN</td>
									<td>Load</td>
									<td>Reg0</td>
									<td>MINORS</td>
									<td></td>
									<td>;</td>
									<td>THEN: load the number of minors into register 0.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>Reg1</td>
									<td>1</td>
									<td></td>
									<td>;</td>
									<td>load the constant value 1 into register 1.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Add</td>
									<td>Reg0</td>
									<td>Reg0</td>
									<td>Reg1</td>
									<td>;</td>
									<td>add contents of register 1 to register 0.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>Reg0</td>
									<td>MINORS</td>
									<td></td>
									<td>;</td>
									<td>update number of minors from register 0.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Jump</td>
									<td>ENDIF</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>go to the statement labelled 'endif'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>ELSE</td>
									<td>Load</td>
									<td>reg0</td>
									<td>ADULTS</td>
									<td></td>
									<td>;</td>
									<td>ELSE: load the number of adults into register 0. </td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>Reg1</td>
									<td>1</td>
									<td></td>
									<td>;</td>
									<td>load the constant value  1 into register 1</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Add</td>
									<td>Reg0</td>
									<td>Reg0</td>
									<td>Reg1</td>
									<td>;</td>
									<td>add contents of register 1 to register 0.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>Reg0</td>
									<td>ADULTS</td>
									<td></td>
									<td>;</td>
									<td>update number of adults from register 0.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>ENDIF</td>
									<td>HALT</td>
									<td></td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>halt execution of this assembly language program.</td>
								</tr>
								
								fig9
								<tr>
									<td></td>
									<td>*</td>
									<td>X</td>
									<td>.Word</td>
									<td>5</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare and initialize 'x' to 5    &#47;&#42; first operand &#42;&#47;</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>Y</td>
									<td>.Word</td>
									<td>4</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare and initialize 'y' to 4    &#47;&#42; second operand &#42;&#47;</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>Z</td>
									<td>.Block</td>
									<td>1</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare 'z'  &#47;&#42; z will hold the product of the operands &#42;&#47; </td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>I</td>
									<td>.Block</td>
									<td>1</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare 'i'  &#47;&#42; i counts the number of loop iterations &#42;&#47; </td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegA</td>
									<td>0</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>RegA</td>
									<td>Z</td>
									<td></td>
									<td>;</td>
									<td>z = 0;</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegA</td>
									<td>1</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>RegA</td>
									<td>I</td>
									<td></td>
									<td>;</td>
									<td>i = 1;</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>LOOP</td>
									<td>Load</td>
									<td>RegA</td>
									<td>I</td>
									<td></td>
									<td>;</td>
									<td>while(i<=y)</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Load</td>
									<td>RegB</td>
									<td>Y</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Compare</td>
									<td>RegA</td>
									<td>RegB</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Branch</td>
									<td>GT</td>
									<td>ENDLP</td>
									<td></td>
									<td>;</td>
									<td>{</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Load</td>
									<td>RegA</td>
									<td>Z</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Load</td>
									<td>RegB</td>
									<td>X</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Add</td>
									<td>RegC</td>
									<td>RegA</td>
									<td>RegB</td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>RegC</td>
									<td>Z</td>
									<td></td>
									<td>;</td>
									<td> z = z + x;</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Load</td>
									<td>RegA</td>
									<td>I</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegB</td>
									<td>1</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Add</td>
									<td>RegC</td>
									<td>RegA</td>
									<td>RegB</td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>RegC</td>
									<td>I</td>
									<td></td>
									<td>;</td>
									<td>i = i + 1;</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Jump</td>
									<td>LOOP</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>}</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>ENDLP</td>
									<td>Halt</td>
									<td></td>
									<td></td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								
								fig10
								<tr>
									<td></td>
									<td>*</td>
									<td>X</td>
									<td>.Word</td>
									<td>5</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare and initialize 'x' to 5    /* first operand */</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>Y</td>
									<td>.Word</td>
									<td>4</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare and initialize 'y' to 4    /* second operand */</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>Z</td>
									<td>.Block</td>
									<td>1</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare 'z'  /* z will hold the product of the operands */ </td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>I</td>
									<td>.Block</td>
									<td>1</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>declare 'i'   /* i counts the number of loop iterations */</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>Reg1</td>
									<td>1</td>
									<td></td>
									<td>;</td>
									<td>register 1 holds the constant value 1.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Load</td>
									<td>RegA</td>
									<td>X</td>
									<td></td>
									<td>;</td>
									<td>register A holds the value of variable 'x'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Load</td>
									<td>RegB</td>
									<td>Y</td>
									<td></td>
									<td>;</td>
									<td>register B holds the value of variable 'y'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegC</td>
									<td>0</td>
									<td></td>
									<td>;</td>
									<td>register C holds the value of variable 'z' &#45; initially 0.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegD</td>
									<td>1</td>
									<td></td>
									<td>;</td>
									<td>register D holds the value of variable 'i' &#45; initially 1.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>LOOP</td>
									<td>Compare</td>
									<td>RegD</td>
									<td>RegB</td>
									<td></td>
									<td>;</td>
									<td>compare register D (the counter 'i') to register B ('y').</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Branch</td>
									<td>GT</td>
									<td>ENDLP</td>
									<td></td>
									<td>;</td>
									<td>if  'i' is greater  than 'y' then branch to 'endlp'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Add</td>
									<td>RegC</td>
									<td>RegC</td>
									<td>RegA</td>
									<td>;</td>
									<td>otherwise, add the value of  'x' to  'z'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Add</td>
									<td>RegD</td>
									<td>RegD</td>
									<td>Reg1</td>
									<td>;</td>
									<td>add 1 to the counter 'i'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Jump</td>
									<td>LOOP</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>return to the top of the loop.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>ENDLP</td>
									<td>Store</td>
									<td>RegD</td>
									<td>I</td>
									<td></td>
									<td>;</td>
									<td>copy results back to main memory variables.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>RegC</td>
									<td>Z</td>
									<td></td>
									<td>;</td>
									<td>the product of 'x' and 'y' is saved in variable 'z'.</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Halt</td>
									<td></td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>halt execution of this assembly language program.</td>
								</tr>
								
								fig11
								<tr>
									<td></td>
									<td>*</td>
									<td>I</td>
									<td>.Block</td>
									<td>1</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>var i;  //  Numeric</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>A</td>
									<td>.Block</td>
									<td>30</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>var a = new array(30); // Numeric</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegA</td>
									<td>0</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>RegA</td>
									<td>I</td>
									<td></td>
									<td>;</td>
									<td>i = 0;</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>LOOP</td>
									<td>Load</td>
									<td>RegA</td>
									<td>I</td>
									<td></td>
									<td>;</td>
									<td>while (i  < 30) </td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegB</td>
									<td>30</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Compare</td>
									<td>RegA</td>
									<td>RegB</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Branch</td>
									<td>GE</td>
									<td>ENDLP</td>
									<td></td>
									<td>;</td>
									<td>{</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegA</td>
									<td>1</td>
									<td></td>
									<td>;</td>
									<td>Register A assigned the base address of array a</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Load</td>
									<td>RegB</td>
									<td>I</td>
									<td></td>
									<td>;</td>
									<td>Register B assigned the value of subscript i </td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Add</td>
									<td>RegC</td>
									<td>RegA</td>
									<td>RegB</td>
									<td>;</td>
									<td>Register C assigned  the address of a[i]</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegD</td>
									<td>-1</td>
									<td></td>
									<td>;</td>
									<td>Register D assigned the constant  -1</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>StoreInd</td>
									<td>RegD</td>
									<td>RegC</td>
									<td></td>
									<td>;</td>
									<td>a[i] = -1;</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Load</td>
									<td>RegA</td>
									<td>I</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>LoadImm</td>
									<td>RegB</td>
									<td>1</td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Add</td>
									<td>RegC</td>
									<td>RegA</td>
									<td>RegB</td>
									<td>;</td>
									<td></td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Store</td>
									<td>RegC</td>
									<td>I</td>
									<td></td>
									<td>;</td>
									<td>i = i + 1;</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td></td>
									<td>Jump</td>
									<td>LOOP</td>
									<td></td>
									<td></td>
									<td>;</td>
									<td>}</td>
								</tr>
								<tr>
									<td></td>
									<td>*</td>
									<td>ENDLP</td>
									<td>Halt</td>
									<td></td>
									<td></td>
									<td></td>
									<td>;</td>
									<td></td>
								</tr>